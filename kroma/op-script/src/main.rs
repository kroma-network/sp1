//! An end-to-end example of using the SP1 SDK to generate a proof of a program that can be verified
//! on-chain.
//!
//! You can run this script using the following command:
//! ```shell
//! RUST_LOG=info cargo run --package fibonacci-script --bin prove --release
//! ```

pub mod input_builder;
pub mod provider;

use anyhow::Context;
use anyhow::Result;
use clap::{ArgEnum, Parser};
use guest_lib::{
    builder::{BlockBuilderStrategy, OptimismStrategy},
    consts::OP_MAINNET_CHAIN_SPEC,
};
use input_builder::new_block_build_input;
use serde::{Deserialize, Serialize};
use sp1_sdk::{HashableKey, ProverClient, SP1Stdin};
use std::path::PathBuf;

#[derive(ArgEnum, Debug, Clone, PartialEq)]
#[clap(rename_all = "kebab-case")]
enum Mode {
    Prove,
}

#[derive(Parser, Debug)]
#[clap(author, version, about, long_about = None)]
struct Args {
    #[clap(default_value_t = Mode::Prove, short, long, arg_enum)]
    mode: Mode,
    #[clap(short, long)]
    rpc_url: String,
    #[clap(default_value = "./cache", short, long)]
    cache_path: String,
    #[clap(short, long)]
    block_num: u64,
}

/// The ELF (executable and linkable format) file for the Succinct RISC-V zkVM.
///
/// This file is generated by running `cargo prove build` inside the `program` directory.
pub const ZETH_ELF: &[u8] = include_bytes!("../../op-guest/elf/riscv32im-succinct-zkvm-elf");

/// A fixture that can be used to test the verification of SP1 zkVM proofs inside Solidity.
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
struct SP1ZethProofFixture {
    vkey: String,
    public_values: String,
    proof: String,
}

#[tokio::main]
async fn main() -> Result<()> {
    let args = Args::parse();
    sp1_sdk::utils::setup_logger();

    // Setup the prover client and the guest program.
    let client = ProverClient::new();
    let (pk, vk) = client.setup(ZETH_ELF);

    let op_block_input = new_block_build_input(
        &OP_MAINNET_CHAIN_SPEC,
        Some(args.rpc_url),
        Some(args.cache_path),
        args.block_num,
    )
    .await;

    let mut stdin = SP1Stdin::new();
    stdin.write(&op_block_input);

    let _ = OptimismStrategy::build_from(&OP_MAINNET_CHAIN_SPEC, op_block_input.clone())
        .context("Error while building block")
        .unwrap();

    // Generate the proof.
    let proof = client
        .prove_plonk(&pk, stdin)
        .expect("failed to generate proof");

    // Create the testing fixture so we can test things end-to-end.
    let fixture = SP1ZethProofFixture {
        vkey: vk.bytes32().to_string(),
        public_values: proof.public_values.bytes().to_string(),
        proof: proof.bytes().to_string(),
    };

    // The verification key is used to verify that the proof corresponds to the execution of the
    // program on the given input.
    //
    // Note that the verification key stays the same regardless of the input.
    println!("Verification Key: {}", fixture.vkey);

    // The public values are the values which are publicly committed to by the zkVM.
    //
    // If you need to expose the inputs or outputs of your program, you should commit them in
    // the public values.
    println!("Public Values: {}", fixture.public_values);

    // The proof proves to the verifier that the program was executed with some inputs that led to
    // the give public values.
    println!("Proof Bytes: {}", fixture.proof);

    // Save the fixture to a file.
    let fixture_path = PathBuf::from(env!("CARGO_MANIFEST_DIR")).join("../contracts/src/fixtures");
    std::fs::create_dir_all(&fixture_path).expect("failed to create fixture path");
    std::fs::write(
        fixture_path.join("fixture.json"),
        serde_json::to_string_pretty(&fixture).unwrap(),
    )
    .expect("failed to write fixture");

    // Verify proof.
    client
        .verify_plonk(&proof, &vk)
        .expect("verification failed");

    // Save proof.
    proof
        .save("proof-with-io.json")
        .expect("saving proof failed");

    Ok(())
}
