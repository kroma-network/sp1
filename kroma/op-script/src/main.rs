//! An end-to-end example of using the SP1 SDK to generate a proof of a program that can be verified
//! on-chain.
//!
//! You can run this script using the following command:
//! ```shell
//! RUST_LOG=info cargo run --package fibonacci-script --bin prove --release
//! ```

pub mod input_builder;
pub mod provider;

use anyhow::Context;
use anyhow::Result;
use clap::{ArgEnum, Parser};
use guest_lib::{
    builder::{BlockBuilderStrategy, OptimismStrategy},
    consts::OP_MAINNET_CHAIN_SPEC,
};
use input_builder::new_block_build_input;
use serde::{Deserialize, Serialize};
use sp1_sdk::{HashableKey, ProverClient, SP1Stdin};
use std::path::PathBuf;

#[derive(ArgEnum, Debug, Clone, PartialEq)]
#[clap(rename_all = "kebab-case")]
enum Mode {
    Prove,
}

#[derive(Parser, Debug)]
#[clap(author, version, about, long_about = None)]
struct Args {
    #[clap(default_value_t = Mode::Prove, short, long, arg_enum)]
    mode: Mode,
    #[clap(short, long)]
    rpc_url: String,
    #[clap(default_value = "./cache", short, long)]
    cache_path: String,
    #[clap(short, long)]
    block_num: u64,
}

/// The ELF (executable and linkable format) file for the Succinct RISC-V zkVM.
///
/// This file is generated by running `cargo prove build` inside the `program` directory.
pub const ZETH_ELF: &[u8] = include_bytes!("../../op-guest/elf/riscv32im-succinct-zkvm-elf");

/// A fixture that can be used to test the verification of SP1 zkVM proofs inside Solidity.
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
struct SP1ZethProofFixture {
    vkey: String,
    public_values: String,
    proof: String,
}

#[tokio::main]
async fn main() -> Result<()> {
    let args = Args::parse();
    sp1_sdk::utils::setup_logger();

    // Setup the prover client and the guest program.
    let client = ProverClient::new();
    let (pk, vk) = client.setup(ZETH_ELF);

    let op_block_input = new_block_build_input(
        &OP_MAINNET_CHAIN_SPEC,
        Some(args.rpc_url),
        Some(args.cache_path),
        args.block_num,
    )
    .await;

    let mut stdin = SP1Stdin::new();
    stdin.write(&op_block_input);

    let _ = OptimismStrategy::build_from(&OP_MAINNET_CHAIN_SPEC, op_block_input.clone())
        .context("Error while building block")
        .unwrap();

    // Generate the proof.
    let proof = client
        .prove_plonk(&pk, stdin)
        .expect("failed to generate proof");

    // Create the testing fixture so we can test things end-to-end.
    let fixture = SP1ZethProofFixture {
        vkey: vk.bytes32().to_string(),
        public_values: proof.public_values.bytes().to_string(),
        proof: proof.bytes().to_string(),
    };

    // The verification key is used to verify that the proof corresponds to the execution of the
    // program on the given input.
    //
    // Note that the verification key stays the same regardless of the input.
    println!("Verification Key: {}", fixture.vkey);

    // The public values are the values which are publicly committed to by the zkVM.
    //
    // If you need to expose the inputs or outputs of your program, you should commit them in
    // the public values.
    println!("Public Values: {}", fixture.public_values);

    // The proof proves to the verifier that the program was executed with some inputs that led to
    // the give public values.
    println!("Proof Bytes: {}", fixture.proof);

    // Save the fixture to a file.
    let fixture_path = PathBuf::from(env!("CARGO_MANIFEST_DIR")).join("../contracts/src/fixtures");
    std::fs::create_dir_all(&fixture_path).expect("failed to create fixture path");
    std::fs::write(
        fixture_path.join("fixture.json"),
        serde_json::to_string_pretty(&fixture).unwrap(),
    )
    .expect("failed to write fixture");

    // Verify proof.
    client
        .verify_plonk(&proof, &vk)
        .expect("verification failed");

    // Save proof.
    proof
        .save("proof-with-io.json")
        .expect("saving proof failed");

    Ok(())
}
#[cfg(test)]
mod tests {
    use super::*;
    use guest_lib::output::BlockBuildOutput;
    use guest_primitives::{b256, B256};
    use lazy_static::lazy_static;
    use std::collections::HashMap;

    const CACHE_PATH: &str = "./cache";

    #[derive(Debug)]
    struct HeaderSummaryForTest {
        hash: B256,
        state_root: B256,
    }

    lazy_static! {
        static ref HEIGHT_TO_SUMMARY: HashMap<u64, HeaderSummaryForTest> = {
            let mut m = HashMap::new();
            m.insert(
                121282256,
                HeaderSummaryForTest {
                    hash: b256!("94963bbe8a0290ef7b777924d109ab4874324386aa9eaf7932e705a3d9084f62"),
                    state_root: b256!(
                        "5f0ee9d9beab9ea2c2cd0a377fc71c69b4290139b95d44bb47e4da5fb330ace9"
                    ),
                },
            );
            m.insert(
                120794432,
                HeaderSummaryForTest {
                    hash: b256!("c037066dfa979f84bda99016623d1bd4d2168e7a54dfe95b0948b56eda50a2bb"),
                    state_root: b256!(
                        "a1e9207c3c68cd4854074f08226a3643debed27e45bf1b22ab528f8de16245ed"
                    ),
                },
            );

            m.insert(
                121049889,
                HeaderSummaryForTest {
                    hash: b256!("fc88d920d2c1f04d31b9e4ad6043eca80cf975c25f66b6d2d818b6602be41e0d"),
                    state_root: b256!(
                        "ac6f1a9722101300ba71fb58517eadbb4964dc4f4891f8f3e58a292e7c3204f3"
                    ),
                },
            );

            m.insert(
                121003241,
                HeaderSummaryForTest {
                    hash: b256!("d46b61251a4f2b28af3cc4b1b76401381ea7bfd32033b3ec78c9c5068321e49e"),
                    state_root: b256!(
                        "49dfddc9ce6d832c6ab981aea324c3d57b1b1d93823656b43d02608e6b59f3bd"
                    ),
                },
            );

            m.insert(
                121057303,
                HeaderSummaryForTest {
                    hash: b256!("a564e4024ffc946e3d8bcda13195d95603d2300df749e0efdf6628859af008ea"),
                    state_root: b256!(
                        "c8286187544a27fdd14372a0182b366be0c0f0f4c4a0a2ef31ee4538972266f5"
                    ),
                },
            );

            m.insert(
                121065789,
                HeaderSummaryForTest {
                    hash: b256!("38f58786d61fff87845b0e1eda4af07d48063891b17309cd43e2d3535993acfa"),
                    state_root: b256!(
                        "1477b41c16571887dd0cfacd4972f67d98079cbaa4bf98244eacde4aef8d1ab7"
                    ),
                },
            );

            m.insert(
                121135704,
                HeaderSummaryForTest {
                    hash: b256!("6165092c2697f45decd5c00631c427f0b165d54263eb449b4e8009ba1d6a4fb7"),
                    state_root: b256!(
                        "c8201bf473cbf8adfaf240910aea025ea33573af383777a31407a4a4cf3cbfc7"
                    ),
                },
            );
            m
        };
    }

    async fn build_output_from_cache(block_no: u64) -> BlockBuildOutput {
        OptimismStrategy::build_from(
            &OP_MAINNET_CHAIN_SPEC,
            new_block_build_input(
                &OP_MAINNET_CHAIN_SPEC,
                None,
                Some(String::from(CACHE_PATH)),
                block_no,
            )
            .await,
        )
        .unwrap()
    }

    #[tokio::test]
    async fn test_op_ecotone_blocks() {
        for height in HEIGHT_TO_SUMMARY.keys() {
            let output = build_output_from_cache(*height).await;
            match output {
                BlockBuildOutput::SUCCESS {
                    hash,
                    head,
                    state: _,
                    state_input_hash: _,
                } => {
                    assert_eq!(hash, HEIGHT_TO_SUMMARY.get(height).unwrap().hash);
                    assert_eq!(
                        head.state_root,
                        HEIGHT_TO_SUMMARY.get(height).unwrap().state_root
                    );
                }
                _ => panic!("Block verification failed"),
            }
        }
    }
}
